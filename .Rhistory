getwd()
setwd("/dors/meilerlab/home/lib14/projects/kcnq1/modeling/vu_collection/")
df <- read.csv(file = "training_dataset.csv", header = TRUE)
provean <- read.table(file = )
provean <- read.table(file = "provean_predictions.tsv", header = FALSE)
df$propvean <- provean$V2
write.csv(x = df, file = "training_dataset_provean.csv", row.names = FALSE)
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
df$provean <- provean$V2
write.csv(x = df, file = "training_dataset_provean.csv", row.names = FALSE)
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/lda.R')
source('~/workspace/rscripts/kcnq1_modeling/lda.R')
source('~/workspace/rscripts/kcnq1_modeling/lda.R')
source('~/workspace/rscripts/kcnq1_modeling/lda.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
source('~/workspace/rscripts/kcnq1_modeling/logistic_regression.R')
write.csv(x = data.frame(df$provean, df$label), file = "provean.csv", row.names = FALSE, col.names = FALSE)
source('~/workspace/rscripts/kcnq1_modeling/evaluate_q1varpred.R')
source('~/workspace/rscripts/kcnq1_modeling/evaluate_q1varpred.R')
mean(aucs.test)
mean(mccs.test)
tprs.test
mean(tprs.test)
mean(tnrs.test)
mean(accs.test)
getwd()
go <- read.csv(file = "../snps_go_predictions.csv", header = FALSE)
head(go)
write.csv(x = data.frame(go$V4, df$label), file = "../go_predictions.csv", row.names = FALSE)
mean(aucs.test)
mean(aucs.test.folds)
aucs.test.folds
mean(mccs.test)
0.938 + 0.671
a <- b <- 1
a
b
predictsnp <- read.csv(file = "../predictsnp.csv", header = FALSE)
rocr <- prediction(predictions = predictsnp$V1, labels = predictsnp$V2)
rocr
perf <- performance(rocr, measure = "auc")
perf@y.values
perf <- performance(rocr, measure = "tpr")
perf@y.values
rocr@cutoffs
snap <- read.csv(file = "../snap_scores_all.csv", header = TRUE)
head(snap)
head(df)
paste(c(df$w, df$seq_pos, df$m), sep = "")
paste(df$w, df$seq_pos, df$m, sep = "")
variants <- paste(df$w, df$seq_pos, df$m, sep = "")
snap[snap$Variant == variants,]
for(i in variants) {
print(i)}
snap["R594Q",]
snap["R594Q", 2]
head(snap)
rownames(snap) <- snap$Variant
head(snap)
snap["R594Q", ]
snap[variants, ]
setwd()
setwd("../")
df <- read.csv(file = "training_dataset.csv", header = TRUE, stringsAsFactors = FALSE)
head(df)
variants <- paste(df$w, df$seq_pos, df$m, sep = "")
snap_scores <- read.csv(file = "snap_scores_all.csv", header = TRUE)
snap_scores_training_set <- snap_scores[variants, ]
snap_scores_training_set
snap_scores <- read.csv(file = "snap_scores_all.csv", header = TRUE)
head(snap_scores)
variants
snap_scores_training_set <- snap_scores[variants, ]
head(snap_scores_training_set)
snap_scores
rownames(snap_scores) <- snap_scores$Variant
snap_scores_training_set <- snap_scores[variants, ]
head(snap_scores_training_set)
snap_scores_training_set$Label <- df$label
write.csv(x = snap_scores_training_set, file = "snap_scores_training_set.csv", row.names = FALSE, col.names = FALSE)
?write.csv
write.csv(x = snap_scores_training_set, file = "snap_scores_training_set.csv", row.names = FALSE, col.names = NA)
x <- seq(0.05, 1.0, by = 0.05)
x
y <- -sum(x * log2(x))
y
y <- -(x * log2(x)) - (1 - x) * log2(1 - x)
y
x <- seq(0.05, 0.95, by = 0.05)
y <- -(x * log2(x)) - (1 - x) * log2(1 - x)
plot(x, y)
0 * log(0)
x <- seq(0, 1, by = 0.05)
y <- ifelse(x == 0 || x == 1, 0, -(x * log2(x)) - (1 - x) * log2(1 - x))
plot(x, y)
y
x
y <- ifelse(x == 0 || x == 1, 0, -(x * log2(x)) - (1 - x) * log2(1 - x))
y
y <- -(x * log2(x)) - (1 - x) * log2(1 - x)
y
13 / 107
-(13 / 107) * log2(13 / 107) - (1 - 13 / 107) * log2(1 - 13 / 107)
1 - 13 / 107
getwd()
df
table(df$label)
table(df$label) / nrow(df$label)
table(df$label) / nrow(df[, c"label"])
table(df$label) / nrow(df[, c("label")])
table(df$label) / nrow(df[, "label"])
df[c("label")]
table(df$label) / nrow(df[c("label")])
x <- table(df$label) / nrow(df[c("label")])
-sum(x*log2(x))
-x*log2(x)
x
class(x)
names(x)
p <- table(df$label) / length(df$label)
entropy <- -sum(p * log2(p))
entropy
df$erate < 2
sum(df$erate < 2)
sum(df$erate <= 2)
s <- subset(df, df$label <= 2)
nrow(s)
s <- subset(df, df$erate <= 2)
nrow(s)
table(s$label)
entropy <- function(x) {
p <- table(x) / length(x)
return(-sum(p * log2(p)))
}
# compute information gain
emp_entropy <- entropy(df$label)
emp_entropy
df$erate < 2
t <- df$erate < 2
df[t]
df[t,]
df[!t,]
t <- df$erate < 1
df[!t,]
df[t, "label"]
df["label"]
len(df["label"])
length(df["label"])
length(df$label)
emp_ent <- entropy(df$label) # empirical entropy
t <- df$erate <= 1
cond_ent <- (sum(t) / nrow(df)) * entropy(df[t, "label"]) + (sum(!t) / nrow(df)) * entropy(df[!t, "label"])
cond_ent
emp_entropy - cond_ent
emp_ent <- entropy(df$label) # empirical entropy
t <- df$erate <= 2
cond_ent <- (sum(t) / nrow(df)) * entropy(df[t, "label"]) + (sum(!t) / nrow(df)) * entropy(df[!t, "label"])
emp_entropy - cond_ent
is.factor(df$label)
?stop
as.factor(df$label)
as.factor(df$label)
class(df$label)
x <- as.factor(df$label)
class(x)
x <- df$label
# function that computes entropy
entropy <- function(x) {
if(!is.factor(x)) {
warning("given object is not a factor object, converting it to a factor")
x <- as.factor(x)
}
p <- table(x) / length(x)
return(-sum(p * log2(p)))
}
entropy(x)
# function that computes entropy
entropy <- function(x) {
if(!is.factor(x)) {
warning("given object is not a factor object, attempt was made to convert it to a factor")
x <- as.factor(x)
}
p <- table(x) / length(x)
return(-sum(p * log2(p)))
}
entropy(x)
order(df$erate)
df[order(df$erate),]
log(0)
log2(0)
0 * log2(0)
x <- c(0, 1)
ifelse(x == 0 | x == 1, 0, log2(x))
x == 0 | x == 1
p <- seq(0, 1, by = 0.05)
ifelse(p == 0 | p == 1, 0, p * log2(p))
-(sum(ifelse(p == 0 | p == 1, 0, p * log2(p)))
)
plot(p, ifelse(p == 0 | p == 1, 0, p * log2(p)))
plot(p, -ifelse(p == 0 | p == 1, 0, p * log2(p)))
plot(p, -ifelse(p == 0 | p == 1, 0, p * log2(p) + (1 - p) * log2(1 - p)))
plot(p, -ifelse(p == 0 | p == 1, 0, p * log2(p) + (1 - p) * log2(1 - p)), lty = "l")
plot(p, -ifelse(p == 0 | p == 1, 0, p * log2(p) + (1 - p) * log2(1 - p)), type = "l")
sort(df$erate)
# compute information gain
emp_ent <- entropy(df$label) # empirical entropy
erate_sorted <- sort(df$erate)
for(i in erate_sorted) {
t <- df$erate <= i
cond_ent <- (sum(t) / nrow(df)) * entropy(df[t, "label"]) + (sum(!t) / nrow(df)) * entropy(df[!t, "label"])
}
emp_ent <- entropy(df$label) # empirical entropy
erate_sorted <- sort(df$erate)
cond_ent <- numeric(length = length(df$erate))
for(i in erate_sorted) {
t <- df$erate <= i
cond_ent[i] <- (sum(t) / nrow(df)) * entropy(df[t, "label"]) + (sum(!t) / nrow(df)) * entropy(df[!t, "label"])
}
cond_ent
for(i in erate_sorted) {
print(i)}
emp_ent <- entropy(df$label) # empirical entropy
erate_sorted <- sort(df$erate)
cond_ent <- numeric(length = length(df$erate))
for(i in 1:length(erate_sorted)) {
t <- df$erate <= erate_sorted[i]
cond_ent[i] <- (sum(t) / nrow(df)) * entropy(df[t, "label"]) + (sum(!t) / nrow(df)) * entropy(df[!t, "label"])
}
cond_ent
which.max(cond_ent)
which.min(cond_ent)
erate_sorted[87]
min(cond_ent)
emp_ent - min(cond_ent)
df
df[1:2, "label"]
df["label"]
df["label"][1:2]
df[1:2, "label"]
x <- df[1:2, "label"]
class(x)
as.factor(x)
min(cond_ent)
which.min(cond_ent)
erate_sorted[87]
p <- c(0, 1)
-sum(ifelse(p == 0 | p == 1, 0, p * log2(p)))
erate_sorted
cond_ent
df$feature <- df$erate
colnames(df) <- c("feature", "label")
# function that computes entropy
entropy <- function(x) {
if(!is.factor(x)) {
warning("given object is not a factor object, attempt was made to convert it to a factor")
x <- as.factor(x)
}
p <- table(x) / length(x)
return(-sum(ifelse(p == 0 | p == 1, 0, p * log2(p))))
}
# compute information gain
emp_ent <- entropy(df$label) # empirical entropy
n_rows <- nrow(df)
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in 1:n_rows) {
cond_ents[i] <- i / n_rows * entropy(df[1:i, "label"]) + (1 - i / n_rows) * entropy(df[(i+1):n_rows, "label"])
}
print(cond_ents)
info_gain <- emp_ent - cond_ent
write.csv(x = data.frame(threshold = df_sorted$feature, info_gain = info_gain), file = args$output, row.names = FALSE)
colnames(df) <- c("feature", "label")
# function that computes entropy
entropy <- function(x) {
if(!is.factor(x)) {
warning("given object is not a factor object, attempt was made to convert it to a factor")
x <- as.factor(x)
}
p <- table(x) / length(x)
return(-sum(ifelse(p == 0 | p == 1, 0, p * log2(p))))
}
# compute information gain
emp_ent <- entropy(df$label) # empirical entropy
n_rows <- nrow(df)
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in 1:n_rows) {
cond_ents[i] <- i / n_rows * entropy(df[1:i, "label"]) + (1 - i / n_rows) * entropy(df[(i+1):n_rows, "label"])
}
print(cond_ents)
info_gain <- emp_ent - cond_ent
df_sorted
df
df <- read.csv("erate.csv", header = TRUE)
colnames(df) <- c("feature", "label")
# function that computes entropy
entropy <- function(x) {
if(!is.factor(x)) {
warning("given object is not a factor object, attempt was made to convert it to a factor")
x <- as.factor(x)
}
p <- table(x) / length(x)
return(-sum(ifelse(p == 0 | p == 1, 0, p * log2(p))))
}
# compute information gain
emp_ent <- entropy(df$label) # empirical entropy
n_rows <- nrow(df)
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in 1:n_rows) {
cond_ents[i] <- i / n_rows * entropy(df[1:i, "label"]) + (1 - i / n_rows) * entropy(df[(i+1):n_rows, "label"])
}
print(cond_ents)
emp_ent <- entropy(df$label) # empirical entropy
n_rows <- nrow(df)
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in 1:n_rows) {
cond_ents[i] <- i / n_rows * entropy(df[1:i, "label"]) + (1 - i / n_rows) * entropy(df[(i+1):n_rows, "label"])
}
print(cond_ents)
info_gain <- emp_ent - cond_ents
info_gain
which.max(info_gain)
df_sorted[81]
df_sorted[81,]
max(info_gain)
df
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in df_sorted$feature) {
cond_ents[i] <- i / n_rows * entropy(df[1:i, "label"]) + (1 - i / n_rows) * entropy(df[(i+1):n_rows, "label"])
}
print(cond_ents)
info_gain <- emp_ent - cond_ents
cond_ents <- numeric(length = n_rows)
df_sorted <- df[order(df$feature),]
for(i in 1:n_rows) { t <- df$feature <= df$feature[i]
cond_ents[i] <- sum(t) / n_rows * entropy(df[t, "label"]) + (sum(!t) / n_rows) * entropy(df[!t, "label"])
}
print(cond_ents)
info_gain <- emp_ent - cond_ents
df$feature
which.max(cond_ents)
df$feature[90]
which.min(cond_ents)
df$feature[34]
1 / 2 * 3
df_sorted
1:n_rows <= 10
